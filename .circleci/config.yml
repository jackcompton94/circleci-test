version: 2.1

commands:
  send_slack_failure:
    steps:
      - run:
          name: Simulated Slack Failure Alert
          command: echo "üí• Job failed due to timeout! (Simulated Slack alert)"

  with_job_timeout:
    description: "Run job with timeout, simulate Slack alert if timeout hits"
    parameters:
      timeout_minutes:
        type: integer
      steps:
        type: steps
    steps:
      - run:
          name: "Timeout Countdown (<< parameters.timeout_minutes >>m)"
          background: true
          command: |
            sleep $(( << parameters.timeout_minutes >> * 60 ))  # Set timeout based on input minutes
            echo "‚è∞ Timeout hit after << parameters.timeout_minutes >> minutes!"
            # Simulate sending a Slack failure message when timeout is reached
            echo "üí• Job timed out after << parameters.timeout_minutes >> minutes. Sending Slack notification..."
            # Trigger the Slack failure message
            circleci step run send_slack_failure
            # Kill all CircleCI processes (terminate job and workflow)
            pkill -SIGKILL -f "circleci" || true
            exit 1  # Exit the job with failure after sending Slack message and killing processes

      - steps: << parameters.steps >>

jobs:
  simulate_lengthy_process:
    docker:
      - image: cimg/base:stable
    steps:
      - with_job_timeout:
          timeout_minutes: 1  # Set to a 1-minute timeout for testing
          steps:
            - run:
                name: Simulate Work
                command: |
                  echo "Starting work..."
                  sleep 120  # Simulate work that exceeds the timeout
                  echo "Work complete."

workflows:
  test:
    jobs:
      - simulate_lengthy_process
