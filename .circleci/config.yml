version: 2.1

commands:
  send_slack_failure: &slack_failed
    steps:
      - run:
          name: Simulated Slack Failure Alert
          command: echo "ðŸ’¥ Job failed due to timeout! (Simulated Slack alert)"

  with_job_timeout:
    description: "Run the job with a timeout and handle failure"
    parameters:
      timeout_minutes:
        type: integer
      steps:
        type: steps
    steps:
      - run:
          name: "Timeout Monitor (<< parameters.timeout_minutes >>m)"
          background: true
          command: |
            # Start the timeout countdown
            sleep $(( << parameters.timeout_minutes >> * 60 ))  # Timeout set based on the input minutes
            echo "Job timed out. Exiting..."

            # Simulate sending a Slack failure message when timeout is reached (using the anchor directly)
            echo "ðŸ’¥ Job timed out after << parameters.timeout_minutes >> minutes. Sending Slack notification..."
            *slack_failed  # This is where the anchor is used

            # Kill all CircleCI processes (if needed to cancel other jobs in the workflow)
            pkill -SIGKILL -f "circleci" || true  # Gracefully kill the CircleCI job

            exit 1  # Exit the job with failure after killing processes

      - steps: << parameters.steps >>  # Execute the steps passed to this command

jobs:
  simulate_lengthy_process:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Start Job
          command: echo "Starting the job at $(date)"
      - with_job_timeout:
          timeout_minutes: 1  # Simulate a short timeout for testing
          steps:
            - run:
                name: Simulate a task
                command: |
                  echo "Simulating some process..."
                  sleep 120  # Simulate a process that takes longer than the timeout (2 minutes)
      - run:
          name: Finish Job
          command: echo "Job completed at $(date)"

workflows:
  version: 2
  test_workflow:
    jobs:
      - simulate_lengthy_process
